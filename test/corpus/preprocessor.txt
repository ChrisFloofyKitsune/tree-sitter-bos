================================================================================
Include directives
================================================================================

#include "some/path.h"
#include <stdint.h>
#include MACRO
#include MACRO(arg1, arg2)

--------------------------------------------------------------------------------

(source_file
    (preproc_include
        (string_literal
            (string_content)))
    (preproc_include
        (system_lib_string))
    (preproc_include
        (identifier))
    (preproc_include
        (call_expression
            (identifier)
            (argument_list
                (identifier)
                (identifier)))))

================================================================================
Object-like macro definitions
================================================================================

#define ONE
    #define TWO int a = b;
#define THREE \
  c == d ? \
  e : \
  f
#define FOUR (mno * pq)
#define FIVE(a,b) x \
                  + y
#define SIX(a,   \
            b) x \
               + y
#define SEVEN 7/* seven has an
                * annoying comment */
#define EIGHT(x) do { \
        x = x + 1;  \
        x = x / 2;  \
    } while (x > 0);

--------------------------------------------------------------------------------

(source_file
    (preproc_def
        (identifier))
    (preproc_def
        (identifier)
        (preproc_arg))
    (preproc_def
        (identifier)
        (preproc_arg))
    (preproc_def
        (identifier)
        (preproc_arg))
    (preproc_function_def
        (identifier)
        (preproc_params
            (identifier)
            (identifier))
        (preproc_arg))
    (preproc_function_def
        (identifier)
        (preproc_params
            (identifier)
            (identifier))
        (preproc_arg))
    (preproc_def
        (identifier)
        (preproc_arg)
        (comment))
    (preproc_function_def
        (identifier)
        (preproc_params
            (identifier))
        (preproc_arg)))

================================================================================
Function-like macro definitions
================================================================================

#define ONE() a
#define TWO(b) c
#define THREE(d, e) f
#define FOUR(...) g
#define FIVE(h, i, ...) j

--------------------------------------------------------------------------------

(source_file
    (preproc_function_def
        (identifier)
        (preproc_params)
        (preproc_arg))
    (preproc_function_def
        (identifier)
        (preproc_params
            (identifier))
        (preproc_arg))
    (preproc_function_def
        (identifier)
        (preproc_params
            (identifier)
            (identifier))
        (preproc_arg))
    (preproc_function_def
        (identifier)
        (preproc_params)
        (preproc_arg))
    (preproc_function_def
        (identifier)
        (preproc_params
            (identifier)
            (identifier))
        (preproc_arg)))

================================================================================
Ifdefs 1
================================================================================

#ifndef DEFINE1
piece j;
#endif

--------------------------------------------------------------------------------
(source_file
    (preproc_ifdef
        (identifier)
        (piece_declaration
            (identifier))))

================================================================================
Ifdefs 2
================================================================================

#ifdef DEFINE2
static-var b;
#define c 32
#elif defined DEFINE3
#else
static-var b;
#define c 16
#endif

#ifdef DEFINE2
#else
#  ifdef DEFINE3
#  else
#  endif
#endif

--------------------------------------------------------------------------------

(source_file
    (preproc_ifdef
        (identifier)
        (static_var_declaration
            (identifier))
    (preproc_def
        (identifier)
        (preproc_arg))
        (preproc_elif
            (preproc_defined
            (identifier))
        (preproc_else
            (static_var_declaration
                (identifier))
        (preproc_def
            (identifier)
            (preproc_arg)))))
    (preproc_ifdef
        (identifier)
        (preproc_else
            (preproc_ifdef
                (identifier)
                (preproc_else)))))

================================================================================
Elifdefs
================================================================================

#ifndef DEFINE1
piece j;
#elifndef DEFINE2
piece k;
#endif

#ifdef DEFINE2
piece b;
#elifdef DEFINE3
piece c;
#else
piece b;
#endif

--------------------------------------------------------------------------------

(source_file
    (preproc_ifdef
        (identifier)
        (piece_declaration
            (identifier))
    (preproc_elifdef
        (identifier)
        (piece_declaration
            (identifier))))
    (preproc_ifdef
        (identifier)
        (piece_declaration
            (identifier))
    (preproc_elifdef
        (identifier)
        (piece_declaration
            (identifier))
        (preproc_else
            (piece_declaration
                (identifier))))))

================================================================================
Mixing #elif and #elifdef
================================================================================

#ifndef DEFINE1
piece i;
#elif  defined(DEFINE2)
piece j;
#endif

#if defined DEFINE3
piece a;
#elifdef DEFINE4
piece b;
#else
piece c;
#endif

--------------------------------------------------------------------------------

(source_file
    (preproc_ifdef
        (identifier)
        (piece_declaration
            (identifier))
        (preproc_elif
            (preproc_defined
                (identifier))
            (piece_declaration
                (identifier))))
    (preproc_if
        (preproc_defined
                (identifier))
        (piece_declaration
            (identifier))
        (preproc_elifdef
            (identifier)
            (piece_declaration
                (identifier))
            (preproc_else
                (piece_declaration
                    (identifier))))))

================================================================================
General if blocks
================================================================================

#if defined(__GNUC__) && defined(__PIC__)
#define inline inline __attribute__((always_inline))
#elif defined(_WIN32)
#define something
#elif !defined(SOMETHING_ELSE)
#define SOMETHING_ELSE
#else
#include <something>
#endif

--------------------------------------------------------------------------------

(source_file
    (preproc_if
        (binary_expression
            (preproc_defined
                (identifier))
            (preproc_defined
                (identifier)))
        (preproc_def
            (identifier)
            (preproc_arg))
        (preproc_elif
            (preproc_defined
                (identifier))
            (preproc_def
                (identifier))
            (preproc_elif
                (unary_expression
                    (preproc_defined
                        (identifier)))
                (preproc_def
                    (identifier))
                (preproc_else
                    (preproc_include
                        (system_lib_string)))))))

================================================================================
Preprocessor conditionals in functions
================================================================================

main() {
  #if d
    puts(1);
  #else
    puts(2);
  #endif

  #if a
    return 0;
  #elif b
    return 1;
  #elif c
    return 2;
  #else
    return 3;
  #endif
}

--------------------------------------------------------------------------------

(source_file
    (function_declaration
        (identifier)
        (compound_statement
            (preproc_if
                (identifier)
                (macro_call_statement
                    (macro_call_expression
                        (identifier)
                        (argument_list
                            (number_literal))))
                (preproc_else
                    (macro_call_statement
                    (macro_call_expression
                        (identifier)
                        (argument_list
                            (number_literal))))))
        (preproc_if
            (identifier)
            (return_statement
                (number_literal))
            (preproc_elif
                (identifier)
                (return_statement
                    (number_literal))
                (preproc_elif
                    (identifier)
                    (return_statement
                        (number_literal))
                    (preproc_else
                        (return_statement
                        (number_literal)))))))))

================================================================================
Unknown preprocessor directives
================================================================================

#pragma mark - UIViewController

--------------------------------------------------------------------------------

(source_file
    (preproc_call
        (preproc_directive)
        (preproc_arg)))

================================================================================
Preprocessor expressions
================================================================================

#if A(B || C) && \
    !D(F)

piece a;

#endif

--------------------------------------------------------------------------------

(source_file
    (preproc_if
        (binary_expression
            (call_expression
                (identifier)
                (argument_list
                    (binary_expression
                        (identifier)
                        (identifier))))
            (unary_expression
                (call_expression
                    (identifier)
                    (argument_list
                        (identifier)))))
            (piece_declaration
                    (identifier))))